[build-system]
requires = ["scikit-build-core[pyproject]>=0.10.0", "nanobind>=2.5.0"]
build-backend = "scikit_build_core.build"

[project]
name = "fenics-basix"
version = "0.10.0"
description = "Basix Python interface"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { email = "fenics-steering-council@googlegroups.com" },
    { name = "FEniCS Steering Council" },
]
dependencies = ["numpy>=1.21"]

[project.urls]
homepage = "https://fenicsproject.org"
repository = "https://github.com/fenics/basix.git"
documentation = "https://docs.fenicsproject.org"

[project.optional-dependencies]
docs = ["markdown", "pylit3", "pyyaml", "sphinx", "sphinx_rtd_theme"]
lint = ["ruff"]
optional = ["numba", "fenics-ufl>=2025.2.0,<2025.3.0"]
test = ["pytest", "sympy", "scipy", "matplotlib", "fenics-basix[optional]"]
ci = ["mypy", "pytest-xdist", "fenics-basix[docs,lint,test,optional]"]

[tool.pytest.ini_options]
testpaths = ["test"]

[tool.scikit-build]
wheel.packages = ["python/basix"]

[tool.cibuildwheel]
build-frontend = { name = "pip", args = [
    "--config-settings=wheel.py-api=cp312",
] }
build = [
    "cp3{10,11,12,13}-manylinux_x86_64",
    "cp3{10,11,12,13}-manylinux_aarch64",
    "cp3{10,11,12,13}-macosx_x86_64",
    "cp3{10,11,12,13}-macosx_arm64",
    "cp3{10,11,12,13}-win_amd64",
]
test-command = [
    "cmake -G Ninja -DPython3_EXECUTABLE=$(which python) -B build-dir -S {project}/test/test_cmake",
    "cmake --build build-dir/",
    "build-dir/a.out",
    "python -m pytest -n auto --durations 20 {project}/test/",
]
test-requires = ["pytest-xdist"]
test-extras = ["test"]
test-skip = "*-*linux_aarch64"

[tool.cibuildwheel.windows]
build-frontend = { name = "pip", args = [
    "--config-settings=wheel.py-api=cp312",
    "--config-settings=cmake.args=-DINSTALL_RUNTIME_DEPENDENCIES=ON",
    "--config-settings=cmake.args=-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake",
] }
test-command = ["python -m pytest -n auto --durations 20 {project}/test/"]

[[tool.cibuildwheel.overrides]]
select = "cp3{12,13}-win_amd64"
repair-wheel-command = [
    "copy {wheel} {dest_dir}",
    "pipx run abi3audit --verbose --strict --report {wheel}",
]

[tool.cibuildwheel.linux]
archs = [
    "x86_64",
    "aarch64",
] # Forces arm64 build on x86_64 runner using emulation (and vice-versa).
before-build = "yum -y update && yum install -y epel-release && yum install -y openblas-devel ninja-build"

[[tool.cibuildwheel.overrides]]
select = "cp3{12,13}-manylinux*"
repair-wheel-command = [
    "auditwheel repair -w {dest_dir} {wheel}",
    "pipx run abi3audit --verbose --strict --report {wheel}",
]

[tool.cibuildwheel.macos]
environment = { "MACOSX_DEPLOYMENT_TARGET" = "10.14" }
archs = [
    "x86_64",
    "arm64",
] # Forces x86_64 build on arm64 runner using cross-compilation (and vice-versa).
before-build = "export HOMEBREW_AUTO_UPDATING=0 && brew update && brew install ninja"

[[tool.cibuildwheel.overrides]]
select = "cp3{12,13}-macosx*"
repair-wheel-command = [
    "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
    "pipx run abi3audit --verbose --strict --report {wheel}",
]

[tool.mypy]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
indent-width = 4
extend-exclude = ["_basixcpp.pyi", "./joss", "make_html.py"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
exclude = ["joss/"]
select = [
    # "N", # pep8-naming
    "E",   # pycodestyle
    "W",   # pycodestyle
    "D",   # pydocstyle - used only in python/
    "F",   # pyflakes
    "I",   # isort
    "RUF", # Ruff-specific rules
    "UP",  # pyupgrade
    "ICN", # flake8-import-conventions
    "NPY", # numpy-specific rules
    "FLY", # use f-string not static joins
    "LOG", # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    # "ISC", # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    # "B", https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    # "A", # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
]
# ignore = ["UP007", "RUF012"]

[tool.ruff.lint.per-file-ignores]
"test/*" = ["D"]
"demo/*" = ["D"]
"doc/*" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["basix", "ufl"]
