import numpy as _np
import numpy.typing as npt
from typing import Dict as _Dict, List as _ListT

__all__ = ['pre_apply_dof_transformation', 'pre_apply_dof_transformation_interval', 'pre_apply_dof_transformation_triangle', 'pre_apply_dof_transformation_quadrilateral', 'pre_apply_dof_transformation_tetrahedron', 'pre_apply_dof_transformation_hexahedron', 'pre_apply_dof_transformation_prism', 'pre_apply_dof_transformation_pyramid', 'post_apply_transpose_dof_transformation', 'post_apply_transpose_dof_transformation_interval', 'post_apply_transpose_dof_transformation_triangle', 'post_apply_transpose_dof_transformation_quadrilateral', 'post_apply_transpose_dof_transformation_tetrahedron', 'post_apply_transpose_dof_transformation_hexahedron', 'post_apply_transpose_dof_transformation_prism', 'post_apply_transpose_dof_transformation_pyramid']

def pre_apply_dof_transformation(tdim: int, edge_count: int, face_count: int, entity_transformations: _Dict[str, npt.NDArray], entity_dofs: _ListT[_ListT[int]], data: npt.NDArray, cell_info: int, face_types: _ListT[str]): ...
def pre_apply_dof_transformation_interval(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_triangle(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_quadrilateral(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_tetrahedron(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_hexahedron(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_prism(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def pre_apply_dof_transformation_pyramid(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation(tdim: int, edge_count: int, face_count: int, entity_transformations: _ListT[int], entity_dofs: _ListT[int], data: npt.NDArray, cell_info: int, face_types: _ListT[str]): ...
def post_apply_transpose_dof_transformation_interval(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_triangle(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_quadrilateral(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_tetrahedron(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_hexahedron(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_prism(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
def post_apply_transpose_dof_transformation_pyramid(entity_transformations: _Dict[str, npt.NDArray[_np.float64]], entity_dofs: _Dict[str, npt.NDArray[_np.int32]], data: npt.NDArray, cell_info: int): ...
