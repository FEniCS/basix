import basix as _basix
import typing as _typing
import ufl as _ufl
from _typeshed import Incomplete
from ufl.finiteelement.finiteelementbase import FiniteElementBase as _FiniteElementBase

class BasixElement(_FiniteElementBase):
    basix_element: Incomplete
    def __init__(self, element: _basix.finite_element.FiniteElement) -> None: ...
    def mapping(self) -> str: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

def create_element(family: _typing.Union[_basix.ElementFamily, str], cell: _typing.Union[_basix.CellType, str], degree: int, lagrange_variant: _basix.LagrangeVariant = ..., dpc_variant: _basix.DPCVariant = ..., discontinuous: bool = ...) -> BasixElement: ...
def create_vector_element(family: _typing.Union[_basix.ElementFamily, str], cell: _typing.Union[_basix.CellType, str], degree: int, lagrange_variant: _basix.LagrangeVariant = ..., dpc_variant: _basix.DPCVariant = ..., discontinuous: bool = ...) -> _ufl.VectorElement: ...
def create_tensor_element(family: _typing.Union[_basix.ElementFamily, str], cell: _typing.Union[_basix.CellType, str], degree: int, lagrange_variant: _basix.LagrangeVariant = ..., dpc_variant: _basix.DPCVariant = ..., discontinuous: bool = ...) -> _ufl.TensorElement: ...
